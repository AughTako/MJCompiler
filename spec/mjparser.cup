

package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;

parser code {:

	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }


:}


scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}

terminal PROG, BREAK, CLASS, ELSE, CONST, IF, NEW, PRINT, READ, RETURN, VOID, EXTENDS, CONTINUE, FOR, STATIC;
terminal PLUS, MINUS, MUL, DIV, MOD, EQUALEQUAL, NOTEQUAL, GREATER, GREATEROREQUAL, LESS, LESSOREQUAL, AND, OR;
terminal EQUAL, INCREMENT, DECREMENT, SEMI, COLON, COMMA, DOT, LPAREN, RPAREN, LBRACKET, RBRACKET, LBRACE, RBRACE, LAMBDA;
terminal String IDENT, BOOL;
terminal Character CHAR;
terminal Integer NUM;

/* PROGRAM & DECLARATIONS*/

nonterminal Program, ProgName, Declarations, MethodDeclList;
nonterminal ConstDeclr, ConstVals, MoreConstVals;
nonterminal VarDeclr, MoreVarDecls;
nonterminal MethodDecl, MethodDeclName, FormPars, FormParam, FormalParamsExist, OtherFormParamsList, VarDeclInFunction, StatementList;
nonterminal Statement, PrintConst, DesignatorStatement, Designator, Expr, Term, Factor;

nonterminal AddOp, MulOp, RelOp;
nonterminal Type, Brackets, ExprMaybe;

Program ::= PROG ProgName:p Declarations LBRACE MethodDeclList RBRACE;
ProgName ::= IDENT:progName;

Declarations ::= Declarations ConstDeclr
				 | Declarations VarDeclr
				 | (NoDeclarations) /* null */
				 ;
ConstDeclr ::= CONST Type:constType IDENT:constName EQUAL ConstVals MoreConstVals SEMI;
ConstVals ::= NUM:numVal | CHAR:charVal | BOOL:boolVal;
MoreConstVals ::= MoreConstVals COMMA IDENT:constName EQUAL ConstVals
				|
				(NoMoreConstVals) /* null */
				;
				

VarDeclr ::= (VarDeclArray) Type:arrayType IDENT:arrayName LBRACKET RBRACKET Brackets MoreVarDecls SEMI
			|
			(VarDeclVar) Type:varType IDENT:varName MoreVarDecls SEMI
			|
			(ErrorStmtVar) error SEMI:l
		   	{: parser.report_error("Izvrsen oporavak do ; u liniji " + lleft, null);  :}
			;
MoreVarDecls ::= MoreVarDecls COMMA IDENT:arrayName LBRACKET RBRACKET Brackets
			|
			MoreVarDecls COMMA IDENT:varName
			|
			(NoMoreVarDecls) /* null */
			;		
			
MethodDeclList ::= MethodDeclList MethodDecl 
				| /* null */
				;
MethodDecl ::= MethodDeclName LPAREN FormPars RPAREN VarDeclInFunction LBRACE StatementList RBRACE;
MethodDeclName ::= VOID IDENT:methodName
				|
				Type:methodType IDENT:methodName
				;
FormPars ::= FormParam
			|
			(ErrorForms) error:l
				{:parser.report_error("Izvrsen oporavak do ) ",null); :}
			|
			(NoFormPars) /* null */
			;
FormParam ::= Type:type IDENT:name Brackets OtherFormParamsList;
OtherFormParamsList ::= OtherFormParamsList FormalParamsExist
					|
					(ErrorFormsPList) error:l
					{:parser.report_error("Izvrsen oporavak do ) ",null); :}
					|
					/* null */
					;
FormalParamsExist ::= COMMA Type IDENT Brackets;
VarDeclInFunction ::= VarDeclInFunction Type:arrayType IDENT:arrName LBRACKET RBRACKET SEMI
					|
					VarDeclInFunction Type:varType IDENT:varName SEMI
					|
					(NoVarDeclInFunction) /* null */
					;
StatementList ::= StatementList Statement
				|
				(NoStmtList)/*epsilon smena*/
				;

Statement ::= DesignatorStatement SEMI 
			|
			READ LPAREN Designator RPAREN SEMI 
			|
			RETURN ExprMaybe SEMI
			|
			(PrintStmt) PRINT LPAREN Expr PrintConst RPAREN SEMI
			|
			(ErrorStmt) error SEMI:l
		   	{: parser.report_error("Izvrsen oporavak do ; u liniji " + lleft, null);  :}
			;		
PrintConst ::= COMMA NUM:num
			|
			(NoAndConstPrint) /*epsilon smena*/
			;
			
Expr ::= MINUS Term:t
		|
		Term:t
		|
		Expr:ex AddOp Term:t
		;
ExprMaybe ::= Expr | /* null */;
		
Term ::= Term:t MulOp Factor:fact 
		|
		(FactorNoTerm)Factor:fact
		;
		
Factor ::= NUM:num
			|
			CHAR:ch
			|
			LPAREN Expr RPAREN
			|
			 BOOL:bl
			|
			Designator
			|
			NEW Type LBRACKET Expr RBRACKET
			;
DesignatorStatement ::= Designator EQUAL Expr
						|
						Designator INCREMENT
						|
						Designator DECREMENT
						;

Designator ::=  IDENT:name
				|
				Designator LBRACKET Expr RBRACKET
				|
				IDENT:nmspName COLON COLON IDENT:name
				;
/* MISC */

Type ::= IDENT:typeName;
Brackets ::= LBRACKET RBRACKET | (NoBrackets) /*null*/;
AddOp ::= MINUS | PLUS;
MulOp ::= MUL | DIV | MOD;
RelOp ::= GREATER | LESS | GREATEROREQUAL | LESSOREQUAL | EQUAL | NOTEQUAL;
