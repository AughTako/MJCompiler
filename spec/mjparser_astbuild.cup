

package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;

parser code {:

	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }


:}


scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}

terminal PROG, BREAK, CLASS, ELSE, CONST, IF, NEW, PRINT, READ, RETURN, VOID, EXTENDS, CONTINUE, FOR, STATIC;
terminal PLUS, MINUS, MUL, DIV, MOD, EQUALEQUAL, NOTEQUAL, GREATER, GREATEROREQUAL, LESS, LESSOREQUAL, AND, OR;
terminal EQUAL, INCREMENT, DECREMENT, SEMI, COLON, COMMA, DOT, LPAREN, RPAREN, LBRACKET, RBRACKET, LBRACE, RBRACE, LAMBDA;
terminal String IDENT, BOOL;
terminal Character CHAR;
terminal Integer NUM;

/* PROGRAM & DECLARATIONS*/

nonterminal Program Program;
nonterminal ProgName ProgName;
nonterminal Declarations Declarations;
nonterminal MethodDeclList MethodDeclList;
nonterminal ConstDeclr ConstDeclr;
nonterminal ConstVals ConstVals;
nonterminal MoreConstVals MoreConstVals;
nonterminal VarDeclr VarDeclr;
nonterminal MoreVarDecls MoreVarDecls;
nonterminal MethodDecl MethodDecl;
nonterminal MethodDeclName MethodDeclName;
nonterminal FormPars FormPars;
nonterminal FormParam FormParam;
nonterminal FormalParamsExist FormalParamsExist;
nonterminal OtherFormParamsList OtherFormParamsList;
nonterminal VarDeclInFunction VarDeclInFunction;
nonterminal StatementList StatementList;
nonterminal Statement Statement;
nonterminal PrintConst PrintConst;
nonterminal DesignatorStatement DesignatorStatement;
nonterminal Designator Designator;
nonterminal Expr Expr;
nonterminal Term Term;
nonterminal Factor Factor;

nonterminal AddOp AddOp;
nonterminal MulOp MulOp;
nonterminal RelOp RelOp;
nonterminal Type Type;
nonterminal Brackets Brackets;
nonterminal ExprMaybe ExprMaybe;

Program ::= PROG ProgName:p Declarations:D1 LBRACE MethodDeclList:M2 RBRACE {: RESULT=new ProgramDerived1(p, D1, M2); RESULT.setLine(pleft); :};
ProgName ::= IDENT:progName {: RESULT=new ProgNameDerived1(progName); RESULT.setLine(progNameleft); :};

Declarations ::= Declarations:D1 ConstDeclr:C2 {: RESULT=new DeclarationsDerived1(D1, C2); RESULT.setLine(D1left); :}
				 | Declarations:D1 VarDeclr:V2 {: RESULT=new DeclarationsDerived2(D1, V2); RESULT.setLine(D1left); :}
				 | (NoDeclarations) {: RESULT=new NoDeclarations(); :} /* null */
				 ;
ConstDeclr ::= CONST Type:constType IDENT:constName EQUAL ConstVals:C1 MoreConstVals:M2 SEMI {: RESULT=new ConstDeclrDerived1(constType, constName, C1, M2); RESULT.setLine(constTypeleft); :};
ConstVals ::= NUM:numVal {: RESULT=new ConstValsDerived1(numVal); RESULT.setLine(numValleft); :} | CHAR:charVal {: RESULT=new ConstValsDerived2(charVal); RESULT.setLine(charValleft); :} | BOOL:boolVal {: RESULT=new ConstValsDerived3(boolVal); RESULT.setLine(boolValleft); :};
MoreConstVals ::= MoreConstVals:M1 COMMA IDENT:constName EQUAL ConstVals:C2 {: RESULT=new MoreConstValsDerived1(M1, constName, C2); RESULT.setLine(M1left); :}
				|
				(NoMoreConstVals) {: RESULT=new NoMoreConstVals(); :} /* null */
				;
				

VarDeclr ::= (VarDeclArray) Type:arrayType IDENT:arrayName LBRACKET RBRACKET Brackets:B1 MoreVarDecls:M2 SEMI {: RESULT=new VarDeclArray(arrayType, arrayName, B1, M2); RESULT.setLine(arrayTypeleft); :}
			|
			(VarDeclVar) Type:varType IDENT:varName MoreVarDecls:M1 SEMI {: RESULT=new VarDeclVar(varType, varName, M1); RESULT.setLine(varTypeleft); :}
			|
			(ErrorStmtVar) error SEMI:l
		   	{: parser.report_error("Izvrsen oporavak do ; u liniji " + lleft, null);  :} {: RESULT=new ErrorStmtVar(); :}
			;
MoreVarDecls ::= MoreVarDecls:M1 COMMA IDENT:arrayName LBRACKET RBRACKET Brackets:B2 {: RESULT=new MoreVarDeclsDerived1(M1, arrayName, B2); RESULT.setLine(M1left); :}
			|
			MoreVarDecls:M1 COMMA IDENT:varName {: RESULT=new MoreVarDeclsDerived2(M1, varName); RESULT.setLine(M1left); :}
			|
			(NoMoreVarDecls) {: RESULT=new NoMoreVarDecls(); :} /* null */
			;		
			
MethodDeclList ::= MethodDeclList:M1 MethodDecl:M2 {: RESULT=new MethodDeclListDerived1(M1, M2); RESULT.setLine(M1left); :} 
				| {: RESULT=new MethodDeclListDerived2(); :} /* null */
				;
MethodDecl ::= MethodDeclName:M1 LPAREN FormPars:F2 RPAREN VarDeclInFunction:V3 LBRACE StatementList:S4 RBRACE {: RESULT=new MethodDeclDerived1(M1, F2, V3, S4); RESULT.setLine(M1left); :};
MethodDeclName ::= VOID IDENT:methodName {: RESULT=new MethodDeclNameDerived1(methodName); RESULT.setLine(methodNameleft); :}
				|
				Type:methodType IDENT:methodName {: RESULT=new MethodDeclNameDerived2(methodType, methodName); RESULT.setLine(methodTypeleft); :}
				;
FormPars ::= FormParam:F1 {: RESULT=new FormParsDerived1(F1); RESULT.setLine(F1left); :}
			|
			(ErrorForms) error:l
				{:parser.report_error("Izvrsen oporavak do ) ",null); :} {: RESULT=new ErrorForms(); :}
			|
			(NoFormPars) {: RESULT=new NoFormPars(); :} /* null */
			;
FormParam ::= Type:type IDENT:name Brackets:B1 OtherFormParamsList:O2 {: RESULT=new FormParamDerived1(type, name, B1, O2); RESULT.setLine(typeleft); :};
OtherFormParamsList ::= OtherFormParamsList:O1 FormalParamsExist:F2 {: RESULT=new OtherFormParamsListDerived1(O1, F2); RESULT.setLine(O1left); :}
					|
					(ErrorFormsPList) error:l
					{:parser.report_error("Izvrsen oporavak do ) ",null); :} {: RESULT=new ErrorFormsPList(); :}
					| {: RESULT=new OtherFormParamsListDerived2(); :}
					/* null */
					;
FormalParamsExist ::= COMMA Type:T1 IDENT:I2 Brackets:B3 {: RESULT=new FormalParamsExistDerived1(T1, I2, B3); RESULT.setLine(T1left); :};
VarDeclInFunction ::= VarDeclInFunction:V1 Type:arrayType IDENT:arrName LBRACKET RBRACKET SEMI {: RESULT=new VarDeclInFunctionDerived1(V1, arrayType, arrName); RESULT.setLine(V1left); :}
					|
					VarDeclInFunction:V1 Type:varType IDENT:varName SEMI {: RESULT=new VarDeclInFunctionDerived2(V1, varType, varName); RESULT.setLine(V1left); :}
					|
					(NoVarDeclInFunction) {: RESULT=new NoVarDeclInFunction(); :} /* null */
					;
StatementList ::= StatementList:S1 Statement:S2 {: RESULT=new StatementListDerived1(S1, S2); RESULT.setLine(S1left); :}
				|
				(NoStmtList) {: RESULT=new NoStmtList(); :}/*epsilon smena*/
				;

Statement ::= DesignatorStatement:D1 SEMI {: RESULT=new StatementDerived1(D1); RESULT.setLine(D1left); :} 
			|
			READ LPAREN Designator:D1 RPAREN SEMI {: RESULT=new StatementDerived2(D1); RESULT.setLine(D1left); :} 
			|
			RETURN ExprMaybe:E1 SEMI {: RESULT=new StatementDerived3(E1); RESULT.setLine(E1left); :}
			|
			(PrintStmt) PRINT LPAREN Expr:E1 PrintConst:P2 RPAREN SEMI {: RESULT=new PrintStmt(E1, P2); RESULT.setLine(E1left); :}
			|
			(ErrorStmt) error SEMI:l
		   	{: parser.report_error("Izvrsen oporavak do ; u liniji " + lleft, null);  :} {: RESULT=new ErrorStmt(); :}
			;		
PrintConst ::= COMMA NUM:num {: RESULT=new PrintConstDerived1(num); RESULT.setLine(numleft); :}
			|
			(NoAndConstPrint) {: RESULT=new NoAndConstPrint(); :} /*epsilon smena*/
			;
			
Expr ::= MINUS Term:t {: RESULT=new ExprDerived1(t); RESULT.setLine(tleft); :}
		|
		Term:t {: RESULT=new ExprDerived2(t); RESULT.setLine(tleft); :}
		|
		Expr:ex AddOp:A1 Term:t {: RESULT=new ExprDerived3(ex, A1, t); RESULT.setLine(exleft); :}
		;
ExprMaybe ::= Expr:E1 {: RESULT=new ExprMaybeDerived1(E1); RESULT.setLine(E1left); :} | {: RESULT=new ExprMaybeDerived2(); :} /* null */;
		
Term ::= Term:t MulOp:M1 Factor:fact {: RESULT=new TermDerived1(t, M1, fact); RESULT.setLine(tleft); :} 
		|
		(FactorNoTerm)Factor:fact {: RESULT=new FactorNoTerm(fact); RESULT.setLine(factleft); :}
		;
		
Factor ::= NUM:num {: RESULT=new FactorDerived1(num); RESULT.setLine(numleft); :}
			|
			CHAR:ch {: RESULT=new FactorDerived2(ch); RESULT.setLine(chleft); :}
			|
			LPAREN Expr:E1 RPAREN {: RESULT=new FactorDerived3(E1); RESULT.setLine(E1left); :}
			|
			 BOOL:bl {: RESULT=new FactorDerived4(bl); RESULT.setLine(blleft); :}
			|
			Designator:D1 {: RESULT=new FactorDerived5(D1); RESULT.setLine(D1left); :}
			|
			NEW Type:T1 LBRACKET Expr:E2 RBRACKET {: RESULT=new FactorDerived6(T1, E2); RESULT.setLine(T1left); :}
			;
DesignatorStatement ::= Designator:D1 EQUAL Expr:E2 {: RESULT=new DesignatorStatementDerived1(D1, E2); RESULT.setLine(D1left); :}
						|
						Designator:D1 INCREMENT {: RESULT=new DesignatorStatementDerived2(D1); RESULT.setLine(D1left); :}
						|
						Designator:D1 DECREMENT {: RESULT=new DesignatorStatementDerived3(D1); RESULT.setLine(D1left); :}
						;

Designator ::=  IDENT:name {: RESULT=new DesignatorDerived1(name); RESULT.setLine(nameleft); :}
				|
				Designator:D1 LBRACKET Expr:E2 RBRACKET {: RESULT=new DesignatorDerived2(D1, E2); RESULT.setLine(D1left); :}
				|
				IDENT:nmspName COLON COLON IDENT:name {: RESULT=new DesignatorDerived3(nmspName, name); RESULT.setLine(nmspNameleft); :}
				;
/* MISC */

Type ::= IDENT:typeName {: RESULT=new TypeDerived1(typeName); RESULT.setLine(typeNameleft); :};
Brackets ::= LBRACKET RBRACKET {: RESULT=new BracketsDerived1(); :} | (NoBrackets) {: RESULT=new NoBrackets(); :} /*null*/;
AddOp ::= MINUS {: RESULT=new AddOpDerived1(); :} | PLUS {: RESULT=new AddOpDerived2(); :};
MulOp ::= MUL {: RESULT=new MulOpDerived1(); :} | DIV {: RESULT=new MulOpDerived2(); :} | MOD {: RESULT=new MulOpDerived3(); :};
RelOp ::= GREATER {: RESULT=new RelOpDerived1(); :} | LESS {: RESULT=new RelOpDerived2(); :} | GREATEROREQUAL {: RESULT=new RelOpDerived3(); :} | LESSOREQUAL {: RESULT=new RelOpDerived4(); :} | EQUAL {: RESULT=new RelOpDerived5(); :} | NOTEQUAL {: RESULT=new RelOpDerived6(); :};
